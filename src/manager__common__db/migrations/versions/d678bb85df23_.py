"""empty message

Revision ID: d678bb85df23
Revises: 
Create Date: 2021-09-03 13:06:36.440386

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd678bb85df23'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('project',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.Column('date_deleted', sa.DateTime(), nullable=True),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('user_created_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_modified_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_deleted_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('key', sa.String(length=5), nullable=False),
    sa.Column('project_manager_user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_launched', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('active', 'pending', 'stopped', 'completed', 'archived', name='statusproject'), nullable=False),
    sa.Column('is_initiative_document_exists', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('type', sa.Enum('hard', 'soft', 'hard_and_soft', 'other', name='typeproject'), nullable=False),
    sa.Column('priority', sa.Enum('high', 'middle', 'low', name='priorityproject'), nullable=False),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('customer_organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('executor_organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('category', sa.Enum('upper_level_or_private_office', 'internal_projects', 'oto', 'roller_shutter_automatics', 'middle_network_layer', 'communication_technologies', 'smart_house', 'water_metering', 'gas_metering', 'electricity_metering', 'other', name='categoryproject'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key'),
    sa.UniqueConstraint('name')
    )
    op.create_table('integration',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.Column('date_deleted', sa.DateTime(), nullable=True),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('user_created_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_modified_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_deleted_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('has_confluence', sa.Boolean(), nullable=True),
    sa.Column('confluence_url', sa.String(length=1000), nullable=True),
    sa.Column('has_jira', sa.Boolean(), nullable=True),
    sa.Column('jira_url', sa.String(length=1000), nullable=True),
    sa.Column('has_gitlab', sa.Boolean(), nullable=True),
    sa.Column('gitlab_url', sa.String(length=1000), nullable=True),
    sa.Column('has_trello', sa.Boolean(), nullable=True),
    sa.Column('trello_url', sa.String(length=1000), nullable=True),
    sa.Column('has_ips', sa.Boolean(), nullable=True),
    sa.Column('ips_url', sa.String(length=1000), nullable=True),
    sa.Column('has_teams', sa.Boolean(), nullable=True),
    sa.Column('teams_url', sa.String(length=1000), nullable=True),
    sa.Column('has_enterprise', sa.Boolean(), nullable=True),
    sa.Column('enterprise_url', sa.String(length=1000), nullable=True),
    sa.Column('has_kiwi', sa.Boolean(), nullable=True),
    sa.Column('kiwi_url', sa.String(length=1000), nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('modification',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.Column('date_deleted', sa.DateTime(), nullable=True),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('user_created_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_modified_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_deleted_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_release',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.Column('date_deleted', sa.DateTime(), nullable=True),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('user_created_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_modified_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_deleted_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('organization_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('date_started', sa.DateTime(), nullable=False),
    sa.Column('date_finished_planned', sa.DateTime(), nullable=False),
    sa.Column('date_finished_real', sa.DateTime(), nullable=True),
    sa.Column('description', sa.String(length=2000), nullable=True),
    sa.Column('conversation_url', sa.String(length=1000), nullable=True),
    sa.Column('release_scope_url', sa.String(length=1000), nullable=True),
    sa.Column('status', sa.Enum('success', 'late', 'missed', name='statusrelease'), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('project_release_comment',
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('date_created', sa.DateTime(), nullable=False),
    sa.Column('date_modified', sa.DateTime(), nullable=False),
    sa.Column('date_deleted', sa.DateTime(), nullable=True),
    sa.Column('is_alive', sa.Boolean(), nullable=False),
    sa.Column('user_created_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_modified_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_deleted_id', postgresql.UUID(as_uuid=True), nullable=True),
    sa.Column('project_step_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('content', sa.String(length=2000), nullable=False),
    sa.ForeignKeyConstraint(['project_step_id'], ['project_release.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('project_release_comment')
    op.drop_table('project_release')
    op.drop_table('modification')
    op.drop_table('integration')
    op.drop_table('project')
    op.execute("DROP TYPE category;")
    # ### end Alembic commands ###
